<?php
/**
 * Created by PhpStorm.
 * User: zippyttech
 * Date: 23/07/18
 * Time: 04:33 PM
 */

namespace App\Http\Services;


use App\Core\TatucoService;
use App\Http\Repositories\TestRepository;
use Dompdf\Exception;
use http\Env\Response;
use Illuminate\Http\Request;

class TestService extends TatucoService
{

    public function __construct()
    {
        parent::__construct(new TestRepository());
    }

    public function store(Request $request)
    {
        $data = [];
        $itemRickAndMorty = $this->getRickAndMortyapi($request->id);
        if (isset($itemRickAndMorty['code_http']) && $itemRickAndMorty['code_http'] !== 200) {
            return response()->json([
                "message"=> "Error al consultar el id : ". $request->id. " en el api : ". env('API_RICK_AND_MORTY')
            ], $itemRickAndMorty['code_http']);
        }
        $data["observations"] = "Esto es una prueba de Luis Ramirez obteniendo data del id : ". $request->id;
        $data["name"] = $itemRickAndMorty["name"];
        $data["status"] = $itemRickAndMorty["status"];
        $data["species"] = $itemRickAndMorty["species"];
        $data["type"] = $itemRickAndMorty["type"];
        $data["gender"] = $itemRickAndMorty["gender"];

        return $this->repository->store($data); // TODO: Change the autogenerated stub
    }

    public function update($id, Request $request)
    {
        return $this->repository->update($id, $request); // TODO: Change the autogenerated stub
    }

    public function getRickAndMortyapi($id)
    {
        try {
            $response = $this->repository->getRickAndMortyapi($id);
            if ($response['code_http'] !== 200) {
              /*  return response()->json([
                    'message' => null
                ], $response['code_http']);*/
              return [
                  "code_http" => $response['code_http']
              ];
            }
            return $response;
        } catch (\Exception $e) {
            parent::errorException($e);
        }

    }

}
